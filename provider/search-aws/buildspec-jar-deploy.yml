# Copyright Â© Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
    commands:
      - echo Entered the install phase...
      - apt-get update -y
      - apt-get install -y maven
      - java -version
      - mvn clean # .m2 is not created until the first Maven command
      - cp ./provider/search-aws/maven/settings.xml /root/.m2/settings.xml # copy the AWS-specific settings.xml to the CodeBuild instance's .m2 folder
      - cat /root/.m2/settings.xml
      - java -version
      - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      - echo $JAVA_HOME
      - mvn -version
      - echo "Look below for M2 bucket name:"
      - echo $M2_REPO_S3_BUCKET
      - aws s3 sync s3://$M2_REPO_S3_BUCKET /root/.m2 # copy previous state of the shared libraries' .m2 folder from S3 to local
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2& # start the Docker Daemon
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done" # wait for Docker to be ready before proceeding to the build steps
  build:
    commands:
      - echo os-search Java build started on `date`...
      - java -version
      - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      - mvn -version
      - echo All environment variables
      - printenv
      - mvn clean test -pl search-core,provider/search-aws
      - echo ...os-search Java build completed on `date`.
      - echo os-search beginning packaging to jar...
      - mvn clean install -pl search-core,provider/search-aws -Ddeployment.environment=$ENVIRONMENT
      - echo Uploading os-search JAR to S3...
      - aws s3 cp provider/$JAR_SERVICE_BASE-aws/target s3://$JAR_DEPLOY_S3_BUCKET/$JAR_SERVICE_BASE-aws --recursive --exclude "*" --include "*.jar" # build and push the JAR(s) to S3

cache:
  paths:
    - '/root/.m2/**/*'

artifacts:
  files:
    - '**/*'
